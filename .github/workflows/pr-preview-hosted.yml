name: 🚀 PR Preview (GitHub-Hosted)

on:
  status:
  pull_request:
    types: [closed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number'
        required: true
        type: string
      head_ref:
        description: 'Head branch reference'
        required: true
        type: string
      head_sha:
        description: 'Head commit SHA'
        required: true
        type: string
      trigger_source:
        description: 'Source that triggered this workflow'
        required: false
        type: string
        default: 'manual'

jobs:
  # Deploy preview using GitHub-hosted runners (only after CI passes)
  deploy-preview:
    name: 🌐 Deploy PR Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'status' || github.event_name == 'workflow_dispatch' || github.event.action == 'closed'
    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write
      issues: write
    
    steps:
      - name: 🔍 Get PR Information and Check CI Status
        id: pr-info
        run: |
          if [ "${{ github.event_name }}" = "status" ]; then
            echo "🎯 Status event triggered!"
            echo "Status context: ${{ github.event.context }}"
            echo "Status state: ${{ github.event.state }}"
            echo "Commit SHA: ${{ github.event.sha }}"
            
            # Only proceed for our CI success status
            if [ "${{ github.event.context }}" != "ci/preview-ready" ] || [ "${{ github.event.state }}" != "success" ]; then
              echo "Not our CI success status, skipping"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "✅ CI success status detected!"
            
            # Find the PR associated with this commit
            PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/search/issues?q=repo:${{ github.repository }}+type:pr+state:open+sha:${{ github.event.sha }}")
            
            PR_NUMBER=$(echo "$PRS" | jq -r '.items[0].number // empty')
            
            if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
              echo "No open PR found for commit ${{ github.event.sha }}, skipping"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Get PR details
            PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
            
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "head_ref=$(echo "$PR_DATA" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
            echo "head_sha=${{ github.event.sha }}" >> $GITHUB_OUTPUT
            echo "action=deploy" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "trigger_source=status_triggered" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🧹 Pull request closed - cleanup mode"
            echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "head_ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
            echo "action=${{ github.event.action }}" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "trigger_source=pr_closed" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "🚀 Manual workflow dispatch triggered"
            echo "PR Number: ${{ inputs.pr_number }}"
            echo "Head Ref: ${{ inputs.head_ref }}"
            echo "Head SHA: ${{ inputs.head_sha }}"
            
            # Get PR info from the workflow inputs
            PR_NUMBER="${{ inputs.pr_number }}"
            HEAD_REF="${{ inputs.head_ref }}"
            HEAD_SHA="${{ inputs.head_sha }}"
            
            if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" = "null" ]; then
              echo "No PR number provided, skipping"
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
            echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
            echo "action=deploy" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "trigger_source=manual" >> $GITHUB_OUTPUT
          fi

      - name: 📥 Checkout Code
        if: steps.pr-info.outputs.should_deploy == 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.head_sha }}

      - name: 📦 Setup Node.js
        if: steps.pr-info.outputs.should_deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            client/package-lock.json
            server/package-lock.json

      - name: 🔧 Install Dependencies
        if: steps.pr-info.outputs.should_deploy == 'true'
        run: |
          npm ci
          cd client && npm ci && cd ..
          cd server && npm ci && cd ..

      - name: 🏗️ Build Application
        if: steps.pr-info.outputs.should_deploy == 'true'
        run: |
          cd client && npm run build && cd ..
          # Tests already passed in CI pipeline - skipping test re-run

      # Check deployment options
      - name: 🔍 Check Deployment Options
        if: steps.pr-info.outputs.should_deploy == 'true'
        id: deployment-check
        run: |
          echo "has_vercel=${{ secrets.VERCEL_TOKEN != '' }}" >> $GITHUB_OUTPUT
          echo "has_netlify=${{ secrets.NETLIFY_AUTH_TOKEN != '' }}" >> $GITHUB_OUTPUT
          echo "has_aws=${{ vars.AWS_S3_BUCKET != '' }}" >> $GITHUB_OUTPUT
          echo "has_firebase=${{ vars.FIREBASE_PROJECT_ID != '' }}" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      # Option 1: Deploy to Vercel (Primary)
      - name: 🚀 Deploy to Vercel
        if: steps.pr-info.outputs.should_deploy == 'true' && steps.deployment-check.outputs.has_vercel == 'true'
        id: vercel-deployment
        run: |
          # Install Vercel CLI
          npm install -g vercel
          
          # Deploy full-stack app to Vercel with auto-confirm and capture output
          echo "y" | vercel --token=${{ secrets.VERCEL_TOKEN }} --prod --yes > deployment.log 2>&1
          
          # Extract the deployment URL from the output
          DEPLOYMENT_URL=$(grep -o 'https://[^[:space:]]*\.vercel\.app' deployment.log | head -1)
          
          # If no URL found in output, try getting from vercel ls
          if [ -z "$DEPLOYMENT_URL" ]; then
            DEPLOYMENT_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -E "pr-review-checker|$(echo ${{ github.repository }} | cut -d'/' -f2)" | head -1 | awk '{print $2}')
            if [ ! -z "$DEPLOYMENT_URL" ] && [[ ! "$DEPLOYMENT_URL" =~ ^https:// ]]; then
              DEPLOYMENT_URL="https://$DEPLOYMENT_URL"
            fi
          fi
          
          # Fallback: construct URL from repository name
          if [ -z "$DEPLOYMENT_URL" ]; then
            REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
            BRANCH_NAME=$(echo ${{ steps.pr-info.outputs.head_ref }} | sed 's/[^a-zA-Z0-9-]/-/g')
            USERNAME=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
            DEPLOYMENT_URL="https://${REPO_NAME}-git-${BRANCH_NAME}-${USERNAME}.vercel.app"
          fi
          
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          
          # Show deployment log for debugging
          echo "=== Deployment Log ==="
          cat deployment.log
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      # Option 2: Deploy to Netlify
      - name: 🚀 Deploy to Netlify
        if: steps.pr-info.outputs.should_deploy == 'true' && steps.deployment-check.outputs.has_netlify == 'true'
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './client/build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - PR #${{ steps.pr-info.outputs.pr_number }}"
          alias: pr-${{ steps.pr-info.outputs.pr_number }}-${{ github.event.repository.name }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Option 3: Deploy to GitHub Pages (Fallback)
      - name: 🚀 Deploy to GitHub Pages
        if: steps.pr-info.outputs.should_deploy == 'true' && steps.deployment-check.outputs.has_vercel == 'false' && steps.deployment-check.outputs.has_netlify == 'false' && steps.deployment-check.outputs.has_aws == 'false' && steps.deployment-check.outputs.has_firebase == 'false'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./client/build
          destination_dir: pr-${{ steps.pr-info.outputs.pr_number }}

      # Option 4: Deploy to AWS S3 + CloudFront
      - name: 🚀 Deploy to AWS S3
        if: steps.pr-info.outputs.should_deploy == 'true' && steps.deployment-check.outputs.has_aws == 'true'
        run: |
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Deploy to S3
          aws s3 sync client/build s3://${{ vars.AWS_S3_BUCKET }}/pr-${{ steps.pr-info.outputs.pr_number }}/ --delete
          
          # Invalidate CloudFront (optional)
          if [ "${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }}" != "" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ vars.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/pr-${{ steps.pr-info.outputs.pr_number }}/*"
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}

      # Option 5: Deploy to Firebase Hosting
      - name: 🚀 Deploy to Firebase
        if: steps.pr-info.outputs.should_deploy == 'true' && steps.deployment-check.outputs.has_firebase == 'true'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ vars.FIREBASE_PROJECT_ID }}'
          channelId: pr-${{ steps.pr-info.outputs.pr_number }}

      - name: 🔗 Get Preview URL
        if: steps.pr-info.outputs.should_deploy == 'true'
        id: preview-url
        run: |
          # Determine preview URL based on deployment method
          if [ "${{ steps.deployment-check.outputs.has_vercel }}" = "true" ]; then
            # Use the actual Vercel deployment URL
            PREVIEW_URL="${{ steps.vercel-deployment.outputs.preview-url }}"
            
            # If URL is empty or just "https://", construct fallback URL
            if [ -z "$PREVIEW_URL" ] || [ "$PREVIEW_URL" = "https://" ]; then
              REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
              BRANCH_NAME=$(echo ${{ steps.pr-info.outputs.head_ref }} | sed 's/[^a-zA-Z0-9-]/-/g')
              USERNAME=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
              PREVIEW_URL="https://${REPO_NAME}-git-${BRANCH_NAME}-${USERNAME}.vercel.app"
              echo "Using fallback Vercel URL: $PREVIEW_URL"
            fi
          elif [ "${{ steps.deployment-check.outputs.has_netlify }}" = "true" ]; then
            PREVIEW_URL="https://pr-${{ steps.pr-info.outputs.pr_number }}-${{ github.event.repository.name }}--${{ vars.NETLIFY_SITE_NAME }}.netlify.app"
          elif [ "${{ steps.deployment-check.outputs.has_aws }}" = "true" ]; then
            if [ -n "${{ vars.AWS_CLOUDFRONT_DOMAIN }}" ]; then
              PREVIEW_URL="https://${{ vars.AWS_CLOUDFRONT_DOMAIN }}/pr-${{ steps.pr-info.outputs.pr_number }}"
            else
              PREVIEW_URL="http://${{ vars.AWS_S3_BUCKET }}.s3-website-${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}.amazonaws.com/pr-${{ steps.pr-info.outputs.pr_number }}"
            fi
          elif [ "${{ steps.deployment-check.outputs.has_firebase }}" = "true" ]; then
            PREVIEW_URL="https://${{ vars.FIREBASE_PROJECT_ID }}--pr-${{ steps.pr-info.outputs.pr_number }}.web.app"
          else
            # Fallback to GitHub Pages
            PREVIEW_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ steps.pr-info.outputs.pr_number }}"
          fi
          
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: 💬 Comment on PR
        if: steps.pr-info.outputs.should_deploy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = '${{ steps.preview-url.outputs.preview_url }}';
            const prNumber = '${{ steps.pr-info.outputs.pr_number }}';
            const headRef = '${{ steps.pr-info.outputs.head_ref }}';
            const headSha = '${{ steps.pr-info.outputs.head_sha }}';
            
            const triggerSource = '${{ steps.pr-info.outputs.trigger_source }}';
            const triggerEmoji = triggerSource === 'status_triggered' ? '🎯' : '🚀';
            const triggerText = triggerSource === 'status_triggered' ? 'Triggered by CI success status event' : 'Manual trigger';
            
            const comment = `## 🚀 Preview Deployment Ready!
            
            ✅ **CI Tests Passed** - Your PR has been successfully deployed after passing all integration tests!
            
            ### 🌐 Preview Link
            **Frontend + API**: [${previewUrl}](${previewUrl})
            
            ### 📊 Deployment Details
            - **PR Number**: #${prNumber}
            - **Branch**: \`${headRef}\`
            - **Commit**: \`${headSha}\`
            - **Trigger**: ${triggerEmoji} ${triggerText}
            - **Deployment**: GitHub-hosted runner (after CI success)
            
            ### 🧪 Test Your Changes
            You can now test the PR approval finder with your changes:
            1. Visit the preview URL above
            2. Enter a GitHub PR URL to test functionality
            3. Verify all features work as expected
            4. API endpoints are available at \`${previewUrl}/api/*\`
            
            ### 📝 Notes
            - ✅ **Tests Passed**: All CI tests passed before deployment
            - 🔄 **Auto-Updates**: Preview updates automatically on new commits (after CI passes)
            - 🧹 **Auto-Cleanup**: Deployment cleaned up when PR is closed
            - 🚀 **Full-Stack**: Both frontend and backend API are deployed
            
            ---
            *Deployed by GitHub Actions after CI success • [View Workflow](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 Preview Deployment Ready!')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

  # Cleanup when PR is closed
  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    permissions:
      contents: write
      pages: write
      pull-requests: write
      issues: write
    
    steps:
      # Check what needs cleanup
      - name: 🔍 Check Cleanup Options
        id: cleanup-check
        run: |
          echo "has_vercel=${{ secrets.VERCEL_TOKEN != '' }}" >> $GITHUB_OUTPUT
          echo "has_aws=${{ vars.AWS_S3_BUCKET != '' }}" >> $GITHUB_OUTPUT
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: 🧹 Cleanup Vercel Deployment
        if: steps.cleanup-check.outputs.has_vercel == 'true'
        run: |
          # Install Vercel CLI
          npm install -g vercel
          
          # Get branch name and construct deployment URL pattern
          BRANCH_NAME=$(echo ${{ github.head_ref }} | sed 's/[^a-zA-Z0-9-]/-/g')
          REPO_NAME=$(echo ${{ github.repository }} | cut -d'/' -f2)
          
          # List deployments and find ones matching this branch
          echo "Looking for deployments matching branch: $BRANCH_NAME"
          vercel list --token=${{ secrets.VERCEL_TOKEN }} | grep -E "${REPO_NAME}.*${BRANCH_NAME}" | awk '{print $1}' | while read deployment; do
            if [ ! -z "$deployment" ]; then
              echo "Removing deployment: $deployment"
              vercel remove "$deployment" --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "Failed to remove $deployment"
            fi
          done
          
          echo "Vercel cleanup completed"

      - name: 🧹 Cleanup AWS S3 Deployment
        if: steps.cleanup-check.outputs.has_aws == 'true'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws s3 rm s3://${{ vars.AWS_S3_BUCKET }}/pr-${{ github.event.number }}/ --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: 💬 Comment Cleanup Complete
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🧹 Preview Deployment Cleaned Up
            
            The preview deployment for this PR has been automatically cleaned up since the PR was closed.
            
            - **Removed deployment**: Preview site deleted
            - **Freed resources**: Cloud resources cleaned up
            
            ---
            *Cleanup completed by GitHub Actions*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            }); 