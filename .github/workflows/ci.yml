name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION_MATRIX: '[18.x, 20.x, 22.x]'

jobs:
  # Basic quality checks
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Code formatting check
      run: npm run format:check
    
    - name: Linting
      run: npm run lint
    
    - name: Build check
      run: cd client && CI=false npm run build

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Run npm audit
      run: |
        echo "=== Root Dependencies ==="
        npm audit --audit-level=moderate || true
        echo "=== Client Dependencies ==="
        cd client && npm audit --audit-level=moderate || true
        echo "=== Server Dependencies ==="
        cd ../server && npm audit --audit-level=moderate || true
    
    - name: Run TruffleHog OSS (PR)
      if: github.event_name == 'pull_request'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --debug --only-verified
    
    - name: Run TruffleHog OSS (Push)
      if: github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before }}
        head: ${{ github.event.after }}
        extra_args: --debug --only-verified
      continue-on-error: true
    
    - name: Run TruffleHog OSS (Full Scan)
      if: github.event_name == 'push' && github.event.before == '0000000000000000000000000000000000000000'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified
      continue-on-error: true

  # Dependency analysis
  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Check for outdated packages
      run: |
        echo "=== Root Package Updates ==="
        npm outdated || true
        echo "=== Client Package Updates ==="
        cd client && npm outdated || true
        echo "=== Server Package Updates ==="
        cd ../server && npm outdated || true
    
    - name: License check
      run: |
        npx license-checker --summary
        cd client && npx license-checker --summary
        cd ../server && npx license-checker --summary

  # Multi-version Node.js testing
  test-matrix:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Run tests
      run: |
        echo "üß™ Checking for test files..."
        
        # Count test files in client (excluding node_modules)
        CLIENT_TESTS=0
        if [ -d "client/src" ]; then
          CLIENT_TESTS=$(find client/src -name "*.test.js" -o -name "*.test.jsx" -o -name "*.spec.js" -o -name "*.spec.jsx" | grep -v node_modules | wc -l | tr -d ' ')
        fi
        
        # Count test files in server (excluding node_modules)
        SERVER_TESTS=0
        if [ -d "server" ]; then
          SERVER_TESTS=$(find server -name "*.test.js" -o -name "*.spec.js" | grep -v node_modules | wc -l | tr -d ' ')
        fi
        
        echo "üìä Test files found:"
        echo "  - Client: $CLIENT_TESTS test files"
        echo "  - Server: $SERVER_TESTS test files"
        
        if [ "$CLIENT_TESTS" -gt 0 ]; then
          echo "üèÉ Running client tests..."
          cd client && npm test -- --watchAll=false --passWithNoTests
          cd ..
        fi
        
        if [ "$SERVER_TESTS" -gt 0 ]; then
          echo "üèÉ Running server tests..."
          cd server && npm test
          cd ..
        fi
        
        if [ "$CLIENT_TESTS" -eq 0 ] && [ "$SERVER_TESTS" -eq 0 ]; then
          echo "‚ÑπÔ∏è No test files found - this is expected for this project"
        fi
        
        echo "‚úÖ Test phase completed successfully"
    
    - name: Build project
      run: cd client && CI=false npm run build

  # CODEOWNERS validation
  codeowners-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate CODEOWNERS
      run: |
        if [ -f ".github/CODEOWNERS" ]; then
          echo "‚úÖ CODEOWNERS file exists"
          echo "CODEOWNERS content:"
          cat .github/CODEOWNERS
        else
          echo "‚ùå CODEOWNERS file not found"
          exit 1
        fi

  # PR-specific checks
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check PR title
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_AUTHOR="${{ github.event.pull_request.user.login }}"
        
        echo "üîç Checking PR title format..."
        echo "PR Title: $PR_TITLE"
        echo "PR Author: $PR_AUTHOR"
        
        # List of collaborators (users who can bypass PR title restrictions)
        # Keep this in sync with .husky/commit-msg collaborators list
        collaborators=(
          "azayasankaran"
          "Aswin-coder"
          "Aswinmcw"
          # Add more collaborators as needed
        )
        
        # List of GitHub teams whose members can bypass PR title restrictions
        # Format: "org/team-slug"
        collaborator_teams=(
          # "your-org/core-team"
          # "your-org/maintainers"
          # Add more teams as needed
        )
        
        # Function to check if user is a collaborator
        is_collaborator() {
          local user="$1"
          for collaborator in "${collaborators[@]}"; do
            if [ "$user" = "$collaborator" ]; then
              return 0
            fi
          done
          return 1
        }
        
        # Function to check if user is a member of any collaborator teams
        is_team_member() {
          local user="$1"
          
          # Skip team checks if no teams configured or no token available
          if [ ${#collaborator_teams[@]} -eq 0 ] || [ -z "${{ secrets.GITHUB_TOKEN }}" ]; then
            return 1
          fi
          
          for team in "${collaborator_teams[@]}"; do
            # Extract org and team from "org/team" format
            local org=$(echo "$team" | cut -d'/' -f1)
            local team_slug=$(echo "$team" | cut -d'/' -f2)
            
            # Check if user is a member of this team using GitHub API
            local response=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/orgs/$org/teams/$team_slug/memberships/$user")
            
            if [ "$response" = "200" ]; then
              echo "‚úÖ User $user is a member of team $team"
              return 0
            fi
          done
          
          return 1
        }
        
        # Function to validate PR title format
        validate_pr_title() {
          local title="$1"
          
          # Check for conventional commit format: type(scope): description
          if [[ "$title" =~ ^(feat|fix|docs|style|refactor|test|chore)(\([a-zA-Z0-9_-]+\))?:\ .+ ]]; then
            return 0
          fi
          
          # Check for issue number format: #123: description
          if [[ "$title" =~ ^#[0-9]+:\ .+ ]]; then
            return 0
          fi
          
          return 1
        }
        
        # If user is a collaborator or team member, allow any PR title
        if is_collaborator "$PR_AUTHOR"; then
          echo "‚úÖ Collaborator detected ($PR_AUTHOR) - PR title restrictions bypassed"
          exit 0
        elif is_team_member "$PR_AUTHOR"; then
          echo "‚úÖ Team member detected ($PR_AUTHOR) - PR title restrictions bypassed"
          exit 0
        fi
        
        # For external contributors, validate the PR title
        echo "üìù External contributor detected - validating PR title format..."
        
        if validate_pr_title "$PR_TITLE"; then
          echo "‚úÖ PR title follows required format"
          exit 0
        else
          echo "‚ùå PR title format invalid!"
          echo ""
          echo "For external contributors, PR titles must follow one of these formats:"
          echo "  ‚Ä¢ Conventional commits: feat: description, fix: description, docs: description, etc."
          echo "  ‚Ä¢ Issue reference: #123: description"
          echo ""
          echo "Examples:"
          echo "  ‚úÖ feat: add user authentication"
          echo "  ‚úÖ fix(auth): resolve login timeout issue"
          echo "  ‚úÖ #456: implement new dashboard feature"
          echo ""
          echo "Your PR title: '$PR_TITLE'"
          echo ""
          echo "If you're a project collaborator, make sure your GitHub username"
          echo "is added to the collaborators list in the workflow."
          
          exit 1
        fi
    
    - name: Check PR size
      run: |
        FILES_CHANGED=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | wc -l)
        LINES_CHANGED=$(git diff --stat origin/${{ github.base_ref }}..HEAD | tail -1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | grep -o '[0-9]\+' | paste -sd+ | bc)
        
        echo "Files changed: $FILES_CHANGED"
        echo "Lines changed: $LINES_CHANGED"
        
        if [ $FILES_CHANGED -gt 50 ] || [ $LINES_CHANGED -gt 1000 ]; then
          echo "‚ö†Ô∏è Large PR detected. Consider breaking it into smaller PRs."
          echo "::warning::Large PR: $FILES_CHANGED files, $LINES_CHANGED lines changed"
        else
          echo "‚úÖ PR size is reasonable"
        fi

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
    
    - name: Start server and run integration tests
      run: |
        echo "Starting server in background..."
        cd server && npm start &
        SERVER_PID=$!
        
        echo "Waiting for server to start..."
        sleep 10
        
        echo "Testing server health..."
        curl -f http://localhost:3001/health || echo "Health check endpoint not available"
        
        echo "Stopping server..."
        kill $SERVER_PID || true
        
        echo "‚úÖ Integration test completed"

  # Final status check
  all-checks-complete:
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan, dependency-analysis, test-matrix, integration-tests]
    if: always()
    
    steps:
    - name: Checkout code
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v4

    - name: Check all jobs status
      id: status-check
      run: |
        echo "Quality Checks: ${{ needs.quality-checks.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Dependency Analysis: ${{ needs.dependency-analysis.result }}"
        echo "Test Matrix: ${{ needs.test-matrix.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.quality-checks.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" && 
              "${{ needs.dependency-analysis.result }}" == "success" && 
              "${{ needs.test-matrix.result }}" == "success" && 
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed!"
          echo "all_passed=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Some checks failed!"
          echo "all_passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: üöÄ Create CI Success Status
      if: steps.status-check.outputs.all_passed == 'true' && github.event_name == 'pull_request'
      run: |
        echo "‚úÖ All CI checks passed!"
        echo "PR Number: ${{ github.event.number }}"
        echo "Head Ref: ${{ github.head_ref }}"
        echo "Head SHA: ${{ github.event.pull_request.head.sha }}"
        
        # Create a commit status to signal CI completion
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }}" \
          -d '{
            "state": "success",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "description": "All CI checks passed - ready for preview deployment",
            "context": "ci/preview-ready"
          }'
        
        echo "üöÄ Status created - preview deployment should trigger automatically" 